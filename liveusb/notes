###############################################################################################################################################################################################################

no need to ever delete anything but always good to hide the crazy...

###############################################################################################################################################################################################################

# HOST

/sda1 - 
sign everything pulled straight from mirrorlist script in pacman-init
https://www.archlinux.org/mirrorlist/?county=all&protocol=https&use_mirror_status=on
can only view finger print on boot... fingerprint collisions || mkinitramfs to just keylog and print excpected output...
^ hence the pulling out (boot without eth (safe mode up to wireless or sim enabled cpus))

/sda2 - 
host.luks
host.rawfs
gnupg{root,revoke,persistent},openssh{ca_server,ca_client},openssl{root,persistent}
^ could go nfc read/write for gnupg dir and private keys rather than gnupg + crypted private keys (still isnt even finished or in use)

/sda3 - 
random.luks
random.rawfs
gnupg{root,revoke,persistent},openssh{ca_server,ca_client},openssl{root,persistent}
^ can add multiple password protected pin generations as in rawfs or rawfs with salt (still havent done random scatter algo to increase pin numbers would still need to eat it ;P)

tmpfs: gnupg{rng},openssh{id_rsa,ssh_host_key_rsa},openssl{server}
^ random generate and sign user uid/gid key set for the 'live' running network

# INTERNAL

part-uuid.luks
part-uuid.rawfs
gnupg{root,persistent},openssh{ca_server,ca_client},openssl{root,persistent}
^ current gnupg for netcat c&c, either 10.0.0.1/172.16.0.1 reverse sshd internal server (did make a dhcp attempt for that) openssl could do internal facing access to wan network
^^ currently stumped on where to leave ssh host key vs internal handover needs seperating

tmpfs: gnupg{rng},openssh{id_rsa,ssh_host_key_rsa},openssl{server}

# CONTAINER
gnupg{root,persistent},openssh{ca_server,ca_client},openssl{root,persistent}

tmpfs: gnupg{rng},openssh{id_rsa,ssh_host_key_rsa},openssl{server}

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

/host
  /gnupg
    /persistent
    /revoke
    /root
    /persistent.public
    /persistent.sig
    /revoke.public
    /root.public

one to many relationship
multibooting host and creating multiple signed internal key rawfs setups

/internal
  /gnupg
    /persistent
    /revoke
    /root
    /persistent.public
    /persistent.sig
    /revoke.public
    /root.public

    /persistent.host.sig  - host persistent signed
    /revoke.host.sig      - host persistent signed
    /root.host.sig        - host persistent signed

    /import persistent.host - import host persistent
    /import revoke.host     - import host revoke
    /import root.host       - import host root

one to many relationship
creating multiple signed container key setups

/container
  /gnupg
    /persistent
    /revoke
    /root
    /persistent.public
    /persistent.sig
    /revoke.public
    /root.public

    /persistent.internal  - internal persistent signed
    /revoke.internal      - internal persistent signed
    /root.internal        - internal persistent signed

    /import persistent.internal - import internal persistent
    /import revoke.internal     - import internal revoke
    /import root.inernal        - import internal root

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################
/mnt
  /internal
  /luks
  /mount
  /rawfs
  /storage
  /tmpfs
  /xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.luks
  /xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.rawfs

firstboot -

setup -

unlock -

lock -

install -

start -


###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

current notes

cant decide how to do openssh/openssl
currently just takes the host cluster network public key and gives it access internally...

either host is wan facing...
internal can run exact setup... seperate user facing 10.0.0.1 and 172.16.0.1

then containers...
internal gets full root access because i need to play / debug over the network...
either host bridge or internal bridge, proxy bridge not really implemented 

but sshd/https facing 10.0.0.1...

i cant really play with sshd keys if i only want access to all the things

but minimum...

internal uses ssh -F /mnt/internal /mnt/tmpfs/keys rdp < - easy hide
internal doesnt really need sshd or https < - havent even finished the host node
but https graphical representation of current internal network would be good for debugging not actual use

probably need to seperate more uid/gid based on role 
wan - eventually other peoples networks api turn around time vs mainting scripts for all your internet belongs to us meh
host - lan facing easy cluster
internal - bridged containers
proxy - bridged containers hopping somewhere random
container - user configured or test network setup (only doing 1 default install for now)

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

container install...
systemd
iptables
st
surf - doing internal https facing ca-certificates.cert
chromium - meh still like google
weechat its a much better chat client
ii can probably dump a c&c on freenode with little cares obvious botnet is obvious still think random social media hijack + stein and the million other less blatent connections (stuff that gets through firewalls)

###############################################################################################################################################################################################################

^ internal https
could do a proxy / tor / openvpn / ssh / socks interface sets ip specific settings host firewall request... etc etc... pretty huge
then internal bridge with container / arch install and play around with interface

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

general changes to liveusb layout coming up...

/mount
  /boot       bootable stuff + rootfs
  /key        host key set
  /random     big raw blob + luks salts
  /rootfs     persistent rootfs rather than hammering arch servers... quicker dev
  /overlayfs  pretty much grouping pacakges and configs i can dump

really i would rather be doing ./container build a rootfs ./boot setup syslinux and bootctl on a vfat32 usb partition
then chop and change syslinux/bootctl menus with whatever squashfs exists... still is chop and change random sizes /shrug
but ive spent to much time on rebootable key infrastructure to care about scrapping it all for a ext4 partiton full of squashfs images

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

forgot how none runnable this actually is...
openssl screwed up hardcoded directories
needs alot of general maintence and testing
hasnt been stable for awhile still trying to define networking
then clean up and reduce scripts to make sense 

###############################################################################################################################################################################################################



