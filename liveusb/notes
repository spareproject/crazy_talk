###############################################################################################################################################################################################################

no need to ever delete anything but always good to hide the crazy...

###############################################################################################################################################################################################################
#

reverse ssh...

from nas
ssh -R 8888:localhost:31279 user@192.168.0.XXX 
from laptop
sshfs user@localhost:/home/user/torrents /mnt

means i need to open...
localhost on nas and laptop...

basically i can ssh out of my router on the wifi router but not the other way round and tv in bed /shrug





if all this shit requires root to run then why would i give any fucks about user input?
assuming you a fucking idiot none of it matters

multiple openssl config files because... 2 line changes... /spit /spit


usb - used to generate openssl when building the iso ie the hard stored keys
host - used to generate the server tmp boot key and sign it
internal - used to generate an internal root,persistent key set







openssl is fucking shit...

my path...

/mnt/storage/liveusb
  /key - all the configs for keys set
  /mount/key - the mount point for host keyset

^ only things key.sh cares about 
where it gets its configs where it creates the keyset....

all openssl config files are creating a config pointing to the directory the keys and certs will be stored in then rm the bloated pointless shit
remake it if you need a key sign 
why because openssl is the single most horrible cli tool ive ever used 
i dont want anything to fucking do with it







.sig root signed for that keyset
.public one hop up signed if it exists ie 

.public root signed for that keyset
.sig - signed by one hop up...

top level gets nothing but .public if its assumed all sub keys are clear sign...
then nested sets ident with .sig?

only because .public in host keyset then one .sig looks shit




root/host keyset
root
revoke
persistent
tmp

persistent.public is signed by its root.. clearsign /shrug
persistent.sig is... signed by 

keyset...
root
revoke
persistent
tmp

host keyset...
internal keyset...
container keyset...

if .public is nester its a cleartext sign from one hop up...
.sig is that keysets root sign

but all public keysets are signed by upper if it exists... done

so export 

###############################################################################################################################################################################################################

pacman -r /mnt/mount/rootfs -Syu any_package < - shits the bed with vercmp
pacman -r /mnt/mount/rootfs -Syu
pacman -r /mnt/mount/rootfs -S any_package 
^ need to test if seperated doesnt fuck shit up or if chromiums just going in the fucking bin



totally dropping multiple key things sigs not publics unless its signed by itself....

root
  root.public
  revoke.public
  persistent.sig  - signed by root
  rng.sig         - signed by persistent

internal
  root.public       root persistent signed
  revoke.public     root persistent signed
  persistent.public root persistent signed
  persistent.sig    internal root signed
  rng.sig           internal persistent signed

container
  root.public       root internal sign
  revoke.public     root internal sign
  persistent.public root internal sign
  persistent.sig    container root sign
  rng.sig           container persistent sign

public key set...
root,revoke,persistentx2,rng

i wanted kill switch two codes for ages... but its really fail when you think about it...
^ give  us the password... lulz... duplicate data fail... 
situational at best


setup to verify internal is.... persistent sign? all signed

right /mnt/internal... when unlocked can proof host and internal

locked and only a shady tmp key with an internal sign but no proof internal was signed from host...

tmpfs needs the entire internal keyset... and internal key signed set...

^ doesnt need it isnt logical fluid ocd stress but its definitly fucking needed later on and im not unlocking to tell a cluster im signed... mode

yeh deal with it

root
revoke
persistent
public internal sets




techincally i can just dump the public keys as signed cleartext
none clear text force it to pipe through gpg and tell you it isnt even a proper sig before you fuck yourself up



so

host...
root.public
revoke.public

persistent.public
persistent.sig    < - only thing linking you to the root cert



root.internal
revoke.internal

persistent.internal
persistent.sig      < - same linking

root.sig
revoke.sig
persistent.sig








so less fucks given...

all networks been done with radio mindset so either adapt or QQ more

i cant test radio so fuck it

would need to setup broadcast to fuck up collisions on purpose 

forced wait... 0.2 if more than one ip hits in time interval send out jargon

still a root owned fuck up...

you totally just tried to troll me into the whole udp message shit...

its reading 2 not data anything that gets through is whole.... 

so fuck you in the face with a brick 

running out of drugs is not a good idea...

i dont give any fucks about the actual data transfer
when it hits netcat 2> spits out the incoming address...

###############################################################################################################################################################################################################

setup... - mounts the finished dir and doesnt "start" ie a unlock run

unlock doesnt support clean up 

^ unlock should be a poweroff for that /mnt/partuuid key

im saying you can have more than one but it mixes them and will fuck up alot

but setup and no tmpfs you can get all the way to boot and still not have the ability to boot no host ssh client key...

^ sucky as well 

###############################################################################################################################################################################################################

host - print out networking related to node on cluster pretty much lan... current openwrt set dhcp... 
internal - 10.0.0.0/8 in regards to host
container - 172.16.0.0/16 in regards to host

wan - 
cluster - nodes made with key... cant test for more than single user
proxy   - some form of public/private challenge response network out

nftables... 

current state...
sshd remote desktop down... iptables < - tested it on running and it was up so /shrug 

butterface means backup to raid5....

dumped liveusb and container onto a usb so super bad checkpoint where nothing even worked in the first place 

to butterface and nftables...

^ if copy on write works and handles really bad hardware pulls 
ive got ssds i can stick in raid 1
and get a usbhub try btrfs raid and eventually just wipe the raid5 and make some container crypted and signed rawfs from whatever arch manages to keep up 

ipv6... all i wanted is address ranges... scan a port... test its cluster signed or create a new one... perms... 

so usb could in theory be completly open o

its only a rootfs that has a random key on it that being the same setup to boot different images in systemd-nspawn 

setup stamps whatever 

* check running against your keys version - patch search and or super evil c&c server hijack... hence proxy drop your crap setup bridge to still split or create connections signed/crypted etc

but then either setup...
dumps your stuff unlocked /locked
leave nodes on / off etc 
hotplug boot some images unplug 
crypted storage or running storage

hmm network to network store the nodes 

well networkctl stuff ish i suppose i still need lan...

but it would be host
do LAN = i know my range so im setting it bash.bashrc
internal=10.0.0.1/8
proxy=172.16.0.1/8 its still just tor can do network to network socks5 with your key setup i suppose

./host.sh does a nc scan of 
LAN
INTERNAL
PROXY
and prints nodes that are up


###############################################################################################################################################################################################################

this basically pulls an updated snapshot
if your installing on a nested vm it takes the newest available everything (working together) from repos
if your dumping anything on host its taking the exact package you gave it without version checking anything else
should always be version checking entire /var/lib/pacman/local/ before assuming any of that shit is going to run
but no kernel images in containers nearly suck qemu back in it...
^ sort of left qemu when i couldnt get the cli to boot vmlinuz img + initramfs + a rootfs, using qemu-img raw was dir rootfs on an image and a single syslinux boot sda given fixed input
^^ if that works ill stick it on and see if grsec would work or just compiling kernels in general

desktops going to try and get radio back : / or atleast wifi + bluetooth (never tried got a cheap Â£3 pound dongle, or probably whatever other bluetooth dongles actually work)
gnuradio + hackrf, have one porta pack and one normal hackrf + wanted a mag strip 3 read/write :P but yeh nfc read write + otp with a phone and multiple networks is easier to buy + sticker reads etc...
it still usefull but not for unhashed two factor auth + block at failed for number of attempts period of time so not exactly passwordless
have one hamitup converter the other one didnt survive a drop would need to resolder it
and probably dump wifi pineapple on it or atleast internet password on/off to it and sort out the access point for either horizontal signal boost or ap and monitor/deauth 
+ it does antennas 
wanted a rfjam directional to remote drones till no battery and watch the drop tests ^_^

if you use magentic north to plot the power given to the 4 motors and record vector of time directionally to the compass you can probably easy
setup turn the remote on... ie release point (can bacon) and record a signle cancelled out section of ram 
using pre record info in like wise conditions or reading mem sensors+windspeed based on overall shape in a windtunnel
^^ can do loads with it pointless going into detail 
but canceling it out in regards to that location based on predicted movement
reversing input to conditions against wind speed, rain etc to
yeh 3d metal conducted tips rotate speed based on it or scattered contacts on the inside 

but radio...
if i can blag echo > /dev/radio0 with easy mapper vs binary input netcat but for fm/am or any modulation 
and setup tx/rx half vs full duplex?

still want to look at mesh network thrown into spammed point and everything bricking itself 

^ was loads of stuff with wpa2 variables well wifi 
basically binary fuzzing listeners to check out casino stats of execution...

never checked the statistics sending random armor gpg messages and the off chance itll pass through gpg -d
thats like size to entry point 
nc -vulnzp 31297 | gpg --homedir /path/to/socket/key --allow-multiple-messages -d > fifo
really wanted 
nc -vulnzp 31297 2>&3 | gpg --homedir /path --allow-multiple-messages -d 3>&1> fifo - so i can fix ips to messages without timer confilts : /
and it core dumps because pipes... if the same message is repeated 22 times... so totally safe
nc -vulncp 31297 ? c closes after connection in... dumped on a while loop

###############################################################################################################################################################################################################



###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

# HOST

/sda1 - 
sign everything pulled straight from mirrorlist script in pacman-init
https://www.archlinux.org/mirrorlist/?county=all&protocol=https&use_mirror_status=on
can only view finger print on boot... fingerprint collisions || mkinitramfs to just keylog and print excpected output...
^ hence the pulling out (boot without eth (safe mode up to wireless or sim enabled cpus))

/sda2 - 
host.luks
host.rawfs
gnupg{root,revoke,persistent},openssh{ca_server,ca_client},openssl{root,persistent}
^ could go nfc read/write for gnupg dir and private keys rather than gnupg + crypted private keys (still isnt even finished or in use)

/sda3 - 
random.luks
random.rawfs
gnupg{root,revoke,persistent},openssh{ca_server,ca_client},openssl{root,persistent}
^ can add multiple password protected pin generations as in rawfs or rawfs with salt (still havent done random scatter algo to increase pin numbers would still need to eat it ;P)

tmpfs: gnupg{rng},openssh{id_rsa,ssh_host_key_rsa},openssl{server}
^ random generate and sign user uid/gid key set for the 'live' running network

# INTERNAL

part-uuid.luks
part-uuid.rawfs
gnupg{root,persistent},openssh{ca_server,ca_client},openssl{root,persistent}
^ current gnupg for netcat c&c, either 10.0.0.1/172.16.0.1 reverse sshd internal server (did make a dhcp attempt for that) openssl could do internal facing access to wan network
^^ currently stumped on where to leave ssh host key vs internal handover needs seperating

tmpfs: gnupg{rng},openssh{id_rsa,ssh_host_key_rsa},openssl{server}

# CONTAINER
gnupg{root,persistent},openssh{ca_server,ca_client},openssl{root,persistent}

tmpfs: gnupg{rng},openssh{id_rsa,ssh_host_key_rsa},openssl{server}

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

/host
  /gnupg
    /persistent
    /revoke
    /root
    /persistent.public
    /persistent.sig
    /revoke.public
    /root.public

one to many relationship
multibooting host and creating multiple signed internal key rawfs setups

/internal
  /gnupg
    /persistent
    /revoke
    /root
    /persistent.public
    /persistent.sig
    /revoke.public
    /root.public

    /persistent.host.sig  - host persistent signed
    /revoke.host.sig      - host persistent signed
    /root.host.sig        - host persistent signed

    /import persistent.host - import host persistent
    /import revoke.host     - import host revoke
    /import root.host       - import host root

one to many relationship
creating multiple signed container key setups

/container
  /gnupg
    /persistent
    /revoke
    /root
    /persistent.public
    /persistent.sig
    /revoke.public
    /root.public

    /persistent.internal  - internal persistent signed
    /revoke.internal      - internal persistent signed
    /root.internal        - internal persistent signed

    /import persistent.internal - import internal persistent
    /import revoke.internal     - import internal revoke
    /import root.inernal        - import internal root

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################
/mnt
  /internal
  /luks
  /mount
  /rawfs
  /storage
  /tmpfs
  /xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.luks
  /xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.rawfs

firstboot -

setup -

unlock -

lock -

install -

start -


###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

current notes

cant decide how to do openssh/openssl
currently just takes the host cluster network public key and gives it access internally...

either host is wan facing...
internal can run exact setup... seperate user facing 10.0.0.1 and 172.16.0.1

then containers...
internal gets full root access because i need to play / debug over the network...
either host bridge or internal bridge, proxy bridge not really implemented 

but sshd/https facing 10.0.0.1...

i cant really play with sshd keys if i only want access to all the things

but minimum...

internal uses ssh -F /mnt/internal /mnt/tmpfs/keys rdp < - easy hide
internal doesnt really need sshd or https < - havent even finished the host node
but https graphical representation of current internal network would be good for debugging not actual use

probably need to seperate more uid/gid based on role 
wan - eventually other peoples networks api turn around time vs mainting scripts for all your internet belongs to us meh
host - lan facing easy cluster
internal - bridged containers
proxy - bridged containers hopping somewhere random
container - user configured or test network setup (only doing 1 default install for now)

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

container install...
systemd
iptables
st
surf - doing internal https facing ca-certificates.cert
chromium - meh still like google
weechat its a much better chat client
ii can probably dump a c&c on freenode with little cares obvious botnet is obvious still think random social media hijack + stein and the million other less blatent connections (stuff that gets through firewalls)

###############################################################################################################################################################################################################

^ internal https
could do a proxy / tor / openvpn / ssh / socks interface sets ip specific settings host firewall request... etc etc... pretty huge
then internal bridge with container / arch install and play around with interface

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

general changes to liveusb layout coming up...

/mount
  /boot       bootable stuff + rootfs
  /key        host key set
  /random     big raw blob + luks salts
  /rootfs     persistent rootfs rather than hammering arch servers... quicker dev
  /overlayfs  pretty much grouping pacakges and configs i can dump

really i would rather be doing ./container build a rootfs ./boot setup syslinux and bootctl on a vfat32 usb partition
then chop and change syslinux/bootctl menus with whatever squashfs exists... still is chop and change random sizes /shrug
is vfat -F32 max size 2G? these are hitting 500mb a piece
but ive spent to much time on rebootable key infrastructure to care about scrapping it all for a ext4 partiton full of squashfs images

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################

forgot how none runnable this actually is...
openssl screwed up hardcoded directories
needs alot of general maintence and testing
hasnt been stable for awhile still trying to define networking
then clean up and reduce scripts to make sense 

###############################################################################################################################################################################################################



