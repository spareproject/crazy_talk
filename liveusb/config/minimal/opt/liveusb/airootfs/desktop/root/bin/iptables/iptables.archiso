#!/bin/env bash
########################################################################################
# filter...   INPUT OUTPUT FORWARD
# nat...      PREROUTING OUTPUT POSTROUTING
# mangle...   PREROUTING OUTPUT INPUT FORWARD POSTROUTING
# raw...      PREROUTING OUTPUT
# security... INPUT OUTPUT FORWARD
########################################################################################
iptables -F
iptables -X
iptables -t filter -F
iptables -t filter -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t raw -F
iptables -t raw -X
iptables -t security -F
iptables -t security -X
########################################################################################
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD DROP
########################################################################################
iptables -N LO
iptables -N KNOCK_ONE
iptables -N KNOCK_TWO
iptables -N KNOCK_THREE
iptables -N KNOCK_FOUR
iptables -N SESSION
iptables -N BLOCKED
iptables -N HOST
iptables -N CONTAINER
iptables -N PROXY
########################################################################################
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables -A INPUT -j BLOCKED
iptables -A INPUT -j KNOCK_ONE
########################################################################################
iptables -A INPUT -m recent --name KNOCK_TWO    --rcheck --seconds 60 --reap -j KNOCK_TWO 
iptables -A INPUT -m recent --name KNOCK_THREE  --rcheck --seconds 60 --reap -j KNOCK_THREE
iptables -A INPUT -m recent --name KNOCK_FOUR   --rcheck --seconds 60 --reap -j KNOCK_FOUR
iptables -A INPUT -m recent --name SESSION      --rcheck --seconds 60 --reap -j SESSION
iptables -A KNOCK_THREE -m recent --name KNOCK_TWO   --remove
iptables -A KNOCK_FOUR  -m recent --name KNOCK_THREE --remove
iptables -A SESSION     -m recent --name KNOCK_FOUR  --remove 
########################################################################################
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED --ctproto tcp -j ACCEPT
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED --ctproto udp -j ACCEPT
########################################################################################
iptables -A INPUT -i lo         -m conntrack --ctstate NEW -j LO
iptables -A INPUT -i host       -m conntrack --ctstate NEW -j HOST
iptables -A INPUT -i container  -m conntrack --ctstate NEW -j CONTAINER
iptables -A INPUT -i proxy      -m conntrack --ctstate NEW -j PROXY
iptables -A INPUT -j LOG --log-prefix "DROPPED" --log-level 6
iptables -A INPUT -j DROP
########################################################################################
iptables -A LO -p udp -d 127.0.0.1 --dport 53 -j ACCEPT         # had a working unbound/dnscrpyt-proxy handoff turned off caching because ram and going for uptime with key debugging...
iptables -A LO -p tcp -d 127.0.0.1 --dport 6010:6023 -j ACCEPT  # sshx display ports
iptables -A LO -p tcp -d 127.0.0.1 --dport 5037 -j ACCEPT       # android-tools: adb devices setups up a listenting socket + statefull handoff device per port?
iptables -A LO -j LOG --log-prefix "LO" --log-level 6
iptables -A LO -j DROP
########################################################################################
iptables -A HOST -p tcp --dport 31279 -j ACCEPT # ssh user
iptables -A HOST -p udp --dport 31297 -j ACCEPT # need a port to attempt if key signed key >> ~/ssh/authorized_keys can set whatever level access based on what script reads it...
iptables -A HOST -j LOG --log-prefix "HOST" --log-level 6
iptables -A HOST -j DROP
########################################################################################
iptables -A CONTAINER -p udp --dport 53 -j ACCEPT      # dns... sort of
iptables -A CONTAINER -p udp --dport 67 -j ACCEPT      # dhcp... sort of
iptables -A CONTAINER -p tcp --dport 8080 -j ACCEPT    # webpanel - nginx, pretty much html5/css guis on a minimal browser based install
iptables -A CONTAINER -p tcp --dport 31279 -j ACCEPT   # systemd-nspawn ssh profile type stuff... playing with keys and uid/gid mapping could still chain internet based on request from container with uid/gid (works? tor complained)
iptables -A CONTAINER -p tcp --dport 31297 -j ACCEPT   # systemd-nspawn profile / testing key stuff with simple netcat + gnupg exchange 
iptables -A CONTAINER -j LOG --log-prefix "CONTAINER" --log-level 6
iptables -A CONTAINER -j DROP
########################################################################################
iptables -A PROXY -p tcp --dport 9050 -j ACCEPT             # default proxy was tor (its free) || openvpn (dont have a setup to test / config it tho /shrug)
iptables -A PROXY -p udp --dport 9053 -j ACCEPT             # default unencrypted tor dns :D || trick dnscrypt (copy response from a failed connection) to fallback to tcp, dump it through 9050 
iptables -A PROXY -j LOG --log-prefix "PROXY" --log-level 6
iptables -A PROXY -j DROP
########################################################################################
iptables -t nat -A POSTROUTING -o host -j MASQUERADE
iptables -A FORWARD        -i host      -o proxy      -m conntrack --ctstate ESTABLISHED,RELATED --ctproto udp -j ACCEPT
iptables -A FORWARD        -i host      -o proxy      -m conntrack --ctstate ESTABLISHED,RELATED --ctproto tcp -j ACCEPT
iptables -A FORWARD        -i host      -o container  -m conntrack --ctstate ESTABLISHED,RELATED --ctproto udp -j ACCEPT
iptables -A FORWARD        -i host      -o container  -m conntrack --ctstate ESTABLISHED,RELATED --ctproto tcp -j ACCEPT
iptables -A FORWARD -p udp -i container -o host       -j ACCEPT
iptables -A FORWARD -p tcp -i container -o host       -j ACCEPT
iptables -A FORWARD -p udp -i proxy     -o host       -j ACCEPT
iptables -A FORWARD -p tcp -i proxy     -o host       -j ACCEPT
#iptables -A FORWARD -j LOG --log-prefix "FORWARD" --log-level 6 # forces logging for anything using wifi see combine not good for ram
########################################################################################
#iptables -t nat -A OUTPUT -s localhost -d localhost -p udp --dport 53 -j REDIRECT --to-port 9053
#iptables -A PREROUTING -t nat -i !internal -p tcp --dport 80 -j REDIRECT --to-port 8080
#iptables -A PREROUTING -t nat -i !internal -p tcp --dport 443 -j REDIRECT --to-port 8080
########################################################################################
iptables -t nat -A PREROUTING -i proxy -p udp -j REDIRECT --to-ports 9053 # redirect output from proxy bridge to port on proxy... can probably add uid/gid mapping
iptables -t nat -A PREROUTING -i proxy -p tcp -j REDIRECT --to-ports 9050 # top dns 9053 all udp ? 9050 and tcp traffic... need to check if port 9053 can handle binary blobs
