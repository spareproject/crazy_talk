#!/bin/env bash
###############################################################################################################################################################################################################
trap "exit" SIGINT
umask 077
clear;cat /etc/banner
###############################################################################################################################################################################################################
# if persistent isnt running or cached and /dev/archiso exists
if [[ ! $(ps aux|grep gpg-agent|grep /home/user/gnupg/persistent) && $(ls /home/user/gnupg/persistent) == "" && -b /dev/archiso1 && -b /dev/archiso2 && -b /dev/archiso3 ]];then
###############################################################################################################################################################################################################

# host public key sets complete
# gnupg - public key set... user only exists if it was created
#if [[ -f /home/user/gnupg/user.public  ]];then                      ;fi
#if [[ -f /home/user/gnupg/user.sig ]];then                          ;fi
#if [[ -f /home/user/gnupg/persistent.public ]];then                 ;fi
#if [[ -f /home/user/gnupg/persistent.sig ]];then                    ;fi
#if [[ -f /home/user/gnupg/root.public ]];then                       ;fi
#if [[ -f /home/user/gnupg/revoke.public ]];then                     ;fi
# openssh - public key set complete
#openssh
#if [[ -f /home/user/openssh/ssh/id_rsa ]];then                      ;fi
#if [[ -f /home/user/openssh/ssh/id_rsa.asc ]];then                  ;fi
#if [[ -f /home/user/openssh/ssh/id_rsa.pub]];then                   ;fi
#if [[ -f /home/user/openssh/ssh/id_rsa-cert.pub]];then              ;fi
#if [[ -f /home/user/openssh/ssh/known_hosts]];then                  ;fi
#opensshd
# opensshd - public key set complete
#if [[ -f /home/user/openssh/sshd/client_ca.pub ]];then              ;fi
#if [[ -f /home/user/openssh/sshd/ssh_host_rsa_key ]];then           ;fi
#if [[ -f /home/user/openssh/sshd/ssh_host_rsa_key.asc ]];then       ;fi
#if [[ -f /home/user/openssh/sshd/ssh_host_rsa_key-cert.pub ]];then  ;fi
#if [[ -f /home/user/openssh/sshd/ssh_host_rsa_key.pub ]];then       ;fi
#openssl
#if [[ -f /home/user/openssl/ca-certificates.crt ]];then             ;fi
#if [[ -f /home/user/openssl/localhost.cert ]];then                  ;fi
#if [[ -f /home/user/openssl/localhost.key ]];then                   ;fi
#if [[ -f /home/user/openssl/localhost.key.asc ]];then               ;fi

#
# host gnupg check...
# host openssh check...
# host openssl check...
# host tmp gnupg check... prompt to create or delete and create
# host tmp openssh check... prompt to create or delete and create
# host tmp openssl check... prompt to create or delete and create
#

# ^ can do that easily enough but i still cant pull expire from openssh or openssl... 

###############################################################################################################################################################################################################
echo -e "this script isnt safe to run twice yet... quit (y|n)"
unset input;while [[ $input != @("y"|"n") ]];do read -rp "input: " input;done
if [[ $input == "y" ]];then exit;fi
###############################################################################################################################################################################################################

#setup
###############################################################################################################################################################################################################a
mount /dev/archiso2
mount /dev/archiso3
###############################################################################################################################################################################################################

# sanity check if the pin you enter doesnt decrypt gpg then hard quit
cp -ar /home/user/.mount/key/gnupg/persistent/* /home/user/gnupg/persistent
unset input;read -rp "enter pin: " input;if [[ ${input} =~ ^0-9+$ ]];then echo "numeric pin";exit;fi
if gpg --homedir /home/user/gnupg/persistent --passphrase-fd 0 -d /home/user/.mount/key/gnupg/trigger.asc <<< $(dd if=/home/user/.mount/random/randomfs bs=1 count=100 ibs=1 skip=${input} 2>/dev/null);then

#gnupg
###############################################################################################################################################################################################################
gpg --homedir /home/user/gnupg/user --passphrase-fd 0 --gen-key --batch /etc/key/gnupg/batch.user <<< "" 2>/dev/null
gpg --homedir /home/user/gnupg/user --output /home/user/gnupg/user.public --export user 2>/dev/null

cp /home/user/.mount/key/gnupg/persistent.public /home/user/gnupg/
cp /home/user/.mount/key/gnupg/persistent.sig    /home/user/gnupg/
cp /home/user/.mount/key/gnupg/revoke.public     /home/user/gnupg/
cp /home/user/.mount/key/gnupg/root.public       /home/user/gnupg/

gpg --homedir /home/user/gnupg/persistent --output /home/user/gnupg/user.sig --sign /home/user/gnupg/user.public

gpg --homedir /home/user/gnupg/user --import /home/user/gnupg/persistent.public
gpg --homedir /home/user/gnupg/user --sign-key persistent
gpg --homedir /home/user/gnupg/user --import /home/user/gnupg/revoke.public
gpg --homedir /home/user/gnupg/user --sign-key revoke
gpg --homedir /home/user/gnupg/user --import /home/user/gnupg/root.public
gpg --homedir /home/user/gnupg/user --sign-key root
###############################################################################################################################################################################################################

#openssh
###############################################################################################################################################################################################################

ssh-keygen -t rsa -b 4096 -f "/home/user/openssh/ssh/id_rsa" -N ""
ssh-keygen -t rsa -b 4096 -f "/home/user/openssh/sshd/ssh_host_rsa_key" -N ""
gpg --homedir /home/user/gnupg/user -e /home/user/openssh/ssh/id_rsa 2>/dev/null
#rm /home/user/ssh/id_rsa
gpg --homedir /home/user/gnupg/user -e /home/user/openssh/sshd/ssh_host_rsa_key 2>/dev/null
#rm /home/user/sshd/ssh_host_rsa_key

cp /home/user/.mount/key/openssh/known_hosts     /home/user/openssh/ssh/
cp /home/user/.mount/key/openssh/client_ca.pub   /home/user/openssh/sshd/

echo -e "Server Certificate Uptime\n1 - 1 hour\n2 - 1 day\n3 - 1 week\n4 - 1 month\n5 - 1 year\n"
unset input;while [[ ${input} != @("1"|"2"|"3"|"4"|"5") ]];do read -p "input: " input;done
if [[ ${input} == "1" ]];then timestamp="+1h";fi
if [[ ${input} == "2" ]];then timestamp="+1d";fi
if [[ ${input} == "3" ]];then timestamp="+1w";fi
if [[ ${input} == "4" ]];then timestamp="+4w";fi
if [[ ${input} == "5" ]];then timestamp="+52w";fi
echo "$(gpg --homedir /home/user/gnupg/persistent -d /home/user/.mount/key/openssh/server_ca.asc 2>/dev/null)"|
ssh-keygen -s /dev/stdin -I server_ca -h -n host -V ${timestamp} /home/user/openssh/sshd/ssh_host_rsa_key.pub

echo -e "Client Certificate Uptime\n1 - 1 hour\n2 - 1 day\n3 - 1 week\n4 - 1 month\n5 - 1 year\n"
unset input;while [[ ${input} != @("1"|"2"|"3"|"4"|"5") ]];do read -p "input: " input;done
if [[ ${input} == "1" ]];then timestamp="+1h";fi
if [[ ${input} == "2" ]];then timestamp="+1d";fi
if [[ ${input} == "3" ]];then timestamp="+1w";fi
if [[ ${input} == "4" ]];then timestamp="+4w";fi
if [[ ${input} == "5" ]];then timestamp="+52w";fi
echo "$(gpg --homedir /home/user/gnupg/persistent -d /home/user/.mount/key/openssh/client_ca.asc 2>/dev/null)"|
ssh-keygen -s /dev/stdin -I user -n user -V ${timestamp} /home/user/openssh/ssh/id_rsa.pub

###############################################################################################################################################################################################################

# openssl
###############################################################################################################################################################################################################

openssl genrsa -out /home/user/openssl/localhost.key 4096
gpg --homedir /home/user/gnupg/user -e /home/user/openssl/localhost.key 2>/dev/null

touch /home/user/openssl/index.txt
echo 1001 > /home/user/openssl/serial
touch /home/user/openssl/.random
mkdir /home/user/openssl/certs

echo -e "Webserver Certificate Uptime\n1 - 1 day\n2 - 1 week\n3 - 1 month\n4 - 1 year\n"
unset input;while [[ ${input} != @("1"|"2"|"3"|"4"|"5") ]];do read -p "input: " input;done
if [[ ${input} == "1" ]];then timestamp="1";fi
if [[ ${input} == "2" ]];then timestamp="7";fi
if [[ ${input} == "3" ]];then timestamp="30";fi
if [[ ${input} == "4" ]];then timestamp="365";fi
openssl req -config /home/user/.mount/key/openssl/persistent.cnf -new -sha256 -key /home/user/openssl/localhost.key -out /home/user/openssl/localhost.csr -subj '/CN=localhost'
openssl ca  -config /home/user/.mount/key/openssl/persistent.cnf -extensions server -days ${timestamp} -notext -md sha256 -in /home/user/openssl/localhost.csr -out /home/user/openssl/localhost.cert

cat /home/user/openssl/localhost.key /home/user/openssl/localhost.cert > /home/user/lighttpd/ssl/localhost.pem
rm /home/user/openssl/localhost.csr
cp /home/user/.mount/key/openssl/ca-certificates.crt /home/user/openssl/ca-certificates.crt

rm -r /home/user/openssl/index.txt*
rm -r /home/user/openssl/serial*
rm -r /home/user/openssl/.random
rm -r /home/user/openssl/certs

###############################################################################################################################################################################################################

###############################################################################################################################################################################################################
sync
kill $(ps aux|grep gpg-agent|grep '/home/user/gnupg/user'|awk '{print $2}')
kill $(ps aux|grep gpg-agent|grep '/home/user/gnupg/persistent'|awk '{print $2}')
umount /home/user/.mount/key
umount /home/user/.mount/random
rm -r  /home/user/gnupg/persistent/*
###############################################################################################################################################################################################################
chown -R user:group /home/user/
chmod -R 700 /home/user/
###############################################################################################################################################################################################################

###############################################################################################################################################################################################################
#
# start host listener... generally dont care how bad this is its going up till i get network discovery going
#

unset input;read -rp "start host listener (y|n)?" input
if [[ $input == "y" ]];then
mkfifo /home/user/host.socket
touch /home/user/host.txt
#cant get netcat to bind to host ip address... has bind or doesnt have bind there is no inbetween
(nc -vulnzp 31279 1>/dev/null 2>/home/user/host.socket &)&
#$(ip addr show host|grep inet|awk '{print $2}'|awk -F '/' '{print $1}')
(while :;do
if read line </home/user/host.socket;then
line=$(echo "$line"|awk '{print $4}'|awk -F ':' '{print $1}')
if [[ $(wc -l </home/user/host.txt) -gt 9 ]];then sed -i 1d /home/user/host.txt;fi
echo $line >> /home/user/host.txt
fi
done &)&

unset input;read -rp "ping network (y|n)?" input
if [[ $input == "y" ]];then
for i in {1..254};do echo fu > /dev/udp/192.168.1.$i/31279;done
fi

chown user:group /home/user/host.socket
chown user:group /home/user/host.txt

fi
#
systemctl start sshd@user
systemctl start lighttpd
sleep 1
systemctl status sshd@user
systemctl status lighttpd
###############################################################################################################################################################################################################

else
kill $(ps aux|grep gpg-agent|grep '/home/user/gnupg/persistent'|awk '{print $2}')
#pkill gpg-agent
rm -r /home/user/gnupg/persistent/*
umount /dev/archiso2
umount /dev/archiso3
echo "Y U N0 ENTER CORRECT PIN!"
fi

else
  echo "device not plugged in|oneshot currently running"
fi
###############################################################################################################################################################################################################
