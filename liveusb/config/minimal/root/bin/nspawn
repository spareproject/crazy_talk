#!/bin/env bash
#########################################################################################################################################################################################
#USAGE_FUNCTIONS
function usage {
cat << EOF
${0} - help
raw     - create || mount an encrypted raw image
install - install rootfs || run install script on containerfs
boot    - boot a rootfs &| overlayfs &| tmpfs
rdp     - start a desktop | application over ssh in Xephyr
monitor - view information about current system
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
function usage_raw {
cat << EOF
-r rootfs
-o overlayfs
-t tmpfs
-s size
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
function usage_install {
cat << EOF
-r rootfs
-o overlayfs
-t tmpfs
-b base
-i install
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
function usage_boot {
cat << EOF
-r rootfs
-o overlayfs
-t tmpfs
-b bridge
-c allow caps
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
function usage_rdp {
cat << EOF
-a address
-x xephyr
-u user
-p port
-e execute
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
function usage_monitor {
cat << EOF
no options yet...
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
function usage_kill {
cat << EOF
-r rootfs
-o overlayfs
-t tmpfs
-a all
EOF
if [[ ${2} ]];then printf "%s\n" "${2}";fi
exit ${1}
}
###############################################################################################################################################################################################################
#INSTALL_FUNCTIONS
function check_base {
if [[ $(wc -w <<< ${BASE}) -ne 1 ]];then usage_install 1 "only one base install script at a time plox or gtfo";fi
AVAILABLE=$(ls ${CONFIG_}base/)
PASS=""
for i in ${AVAILABLE};do if [[ ${i} == ${BASE} ]];then PASS="true";fi;done
if [[ ${PASS} != "true" ]];then usage_install 1 "base install script does not exist";fi
echo "base install script exists in /mnt/container/config/base/"
}
function check_install {
AVAILABLE=$(ls ${CONFIG_}install/)
for i in ${INSTALL};do
  PASS=""
  for o in ${AVAILABLE};do
    if [[ ${i} == ${o} ]];then
      PASS="true"
    fi
  done
    if [[ ${PASS} != "true" ]];then
      usage_install 1 "install script does not exist"
    fi
echo "install script exists in /mnt/container/config/install"
done
}
###############################################################################################################################################################################################################
#RAW_FUNCTIONS
HASH=sha512
CIPHER=twofish-xts-plain64
function raw_create {
  echo "createing raw image"
  dd if=/dev/random bs=1 count=8192 | gpg --homedir ${GNUPG_} -e -r "container" >${KEY_}${1}
  fallocate -l ${SIZE} ${RAWFS_}${1}
  gpg --homedir ${GNUPG_} -d ${KEY_}${1} 2>/dev/null | cryptsetup --hash=${HASH} --cipher=${CIPHER} --offset=0 --key-file=- open --type=plain ${RAWFS_}${1} ${1}
  mkfs.ext4 /dev/mapper/${1}
  mkdir ${2}
  mount /dev/mapper/${1} ${2}
echo "creating rawfs... size: ${SIZE}"
echo "keyfs_ ${KEYS_}/${1} rawfs_ ${RAWFS}_}/${1} map_ /dev/mapper/${1} mount_ ${MOUNT_}/${1}"
}
function raw_mount {
  if [[ ! -d ${2} ]];then mkdir ${2};fi
  gpg --homedir ${GNUPG_} -d ${KEY_}${1} 2>/dev/null | cryptsetup --hash=${HASH} --cipher=${CIPHER} --offset=0 --key-file=- open --type=plain ${RAWFS_}${1} ${1}
  mount /dev/mapper/${1} ${2}
echo "rawfs_ /${RAWFS_}/${1} key_ /${KEY_}/${1} map_ /dev/mapper/${1} mount_ ${MOUNT_}${2}"
}
###############################################################################################################################################################################################################
#RANDOM_FUNCTIONS
function debug {
echo "
rootfs_: ${ROOTFS}:${ROOTFS_}
overlayfs_: ${OVERLAYFS}:${OVERLAYFS_}
tmpfs_: ${TMPFS}:${TMPFS_}
map_: doesnt exist yet : /
mount_: MOUNT:${MOUNT_}
gnupg: GNUPG:${GNUPG_}
key_: KEY:${KEY}
defaults dont take intput as name and appened path... should add it
"
}
# /shrug? could be the if statement, tries to execute before mounting, work around needs nspawn unionfs - takes overlay , underlay mountpoint because its just getting stupid
function unionfs_ro {
echo "mounting overlay-RO:${2}:underlay-RO${3} ${1} - random roll fail mode.."
echo "
if it boots with ??? perms...
umount ${1}
htop /machine-name sigkill nspawn
(might survive might just fuck more things up but machinectl poweroff hangs forever)
never failed once outside of this script... (see nspawn unionfs)
"
if [[ $(mount | grep ${MOUNT_}${1}) ]];then echo "hax - using already mounted ${MOUNT_}${1}"
else unionfs -o allow_other,use_ino,suid,dev,nonempty -o cow ${2}=RO:${3}=RO ${MOUNT_}${1}
fi
echo "random roll - $(ls -lahd ${MOUNT_}${1})"
sleep 1 # testing it
}
function unionfs_rw {
echo "mounting overlay-RO:${2}:underlay-RO${3} ${1} - random roll fail mode.."
echo "
if it boots with ??? perms...
umount ${1}
htop /machine sigkill
(might survive might just fuck more things up but machinectl poweroff hangs forever)
never failed once outside of this script... (see nspawn unionfs)
"
if [[ $(mount | grep ${MOUNT_}${1}) ]];then echo "hax - using already mounted ${MOUNT_}${1}"
else unionfs -o allow_other,use_ino,suid,dev,nonempty -o cow,max_files=33000 ${2}=RW:${3}=RO ${MOUNT_}${1}
fi; 
echo "random roll - $(ls -lahd ${MOUNT_}${1})"
sleep 1 # testing it
}

function nspawn { (/usr/bin/systemd-nspawn --quiet --boot --network-bridge=${BRIDGE} --directory=${1} --drop-capability=${CAPS} &>/dev/null &)& }
###############################################################################################################################################################################################################
command=${1};shift
case $command in
###############################################################################################################################################################################################################



(raw)
umask 077
if [[ ${EUID} -ne 0 ]];then usage_raw 1 "root or gtfo";fi
if [[ $# -eq 0 ]];then usage_raw 0;else
while getopts "r:o:t:s:h" arg;do
  case ${arg} in
    (r)ROOTFS="${OPTARG}";ROOTFS_+="${ROOTFS}";;
    (o)OVERLAYFS="${OPTARG}";;
    (t)TMPFS="${OPTARG}";;
    (s)SIZE="${OPTARG}";;
    (h)usage_raw 0;;
    (*)usage_raw 1;;
  esac
done
if [[ ! -z ${TMPFS} ]];then if [[ ! -z ${OVERLAYFS} ]];then TMPFS="${OVERLAYFS}.${TMPFS}";fi;TMPFS="${ROOTFS}.${TMPFS}";TMPFS_+=${TMPFS};fi
if [[ ! -z ${OVERLAYFS} ]];then OVERLAYFS="${ROOTFS}.${OVERLAYFS}";OVERLAYFS_+=${OVERLAYFS};fi
#######################################################################################################
# ROOTFS
if [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && -z ${TMPFS} ]];then
if [[ ! -z ${SIZE} ]];then
  if [[ -d ${ROOTFS_} ]];then usage_raw 1 "rootfs exists";fi
  if [[ -f ${RAWFS_}${ROOTFS} ]];then usage_raw 1 "rawfs exists";fi
  if [[ -f ${KEY_}${ROOTFS} ]];then usage_raw 1 "key exists";fi
  raw_create ${ROOTFS} ${ROOTFS_}
else
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ $(mount | grep ${ROOTFS_}) ]];then usage 1 "something already mounted on rootfs";fi 
  if [[ ! -f ${RAWFS_}${ROOTFS} ]];then usage 1 "rawfs doesnt exist";fi
  if [[ ! -f ${KEY_}${ROOTFS} ]];then usage 1 "key doesnt exist";fi
  raw_mount ${ROOTFS} ${ROOTFS_}
fi
#######################################################################################################
# ROOTFS TMPFS
elif [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && ! -z ${TMPFS} ]];then
if [[ ! -z ${SIZE} ]];then
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ -d ${TMPFS_} ]];then usage_raw 1 "tmpfs exists";fi
  if [[ -f ${RAWFS_}${TMPFS} ]];then usage_raw 1 "rawfs exists";fi
  if [[ -f ${KEY_}${TMPFS} ]];then usage_raw 1 "key exists";fi
  raw_create ${TMPFS} ${TMPFS_}
else
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ ! -d ${TMPFS_} ]];then usage_raw 1 "tmpfs doesnt exist";fi
  if [[ $(mount | grep ${TMPFS_}) ]];then usage 1 "something already mounted on tmpfs";fi 
  if [[ ! -f ${RAWFS_}${TMPFS} ]];then usage_raw 1 "rawfs doesnt exits";fi
  if [[ ! -f ${KEY_}${TMPFS} ]];then usage_raw 1 "key doesnt exist";fi
  raw_mount ${TMPFS} ${TMPFS_}
fi
#######################################################################################################
# ROOTFS OVERLAYFS
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && -z ${TMPFS} ]];then
if [[ ! -z ${SIZE} ]];then
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ -d ${OVERLAYFS_} ]];then usage_raw 1 "overlayfs exists";fi
  if [[ -f ${RAWFS_}${OVERLAYFS} ]];then usage_raw 1 "rawfs exists";fi
  if [[ -f ${KEY_}${OVERLAYFS} ]];then usage_raw 1 "key exists";fi
  raw_create ${OVERLAYFS} ${OVERLAYFS_}
else
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ ! -d ${OVERLAYFS_} ]];then usage_raw 1 "overlayfs doesnt exist";fi
  if [[ $(mount | grep ${OVERLAYFS_}) ]];then usage 1 "something already mounted on overlayfs";fi 
  if [[ ! -f ${RAWFS_}${OVERLAYFS} ]];then usage_raw 1 "rawfs doesnt exist";fi
  if [[ ! -f ${KEY_}${OVERLAYFS} ]];then usage_raw 1 "key doesnt exist";fi
  raw_mount ${OVERLAYFS} ${OVERLAYFS_}
fi  
#######################################################################################################
# ROOTFS OVERLAYFS TMPFS
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && ! -z ${TMPFS} ]];then
if [[ ! -z ${SIZE} ]];then
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ ! -d ${OVERLAYFS_} ]];then usage_raw 1 "overlayfs doesnt exist";fi
  if [[ -d ${TMPFS_} ]];then usage_raw 1 "tmpfs exists";fi
  if [[ -f ${RAWFS_}${TMPFS} ]];then usage_raw 1 "rawfs exists";fi
  if [[ -f ${KEY_}${TMPFS} ]];then usage_raw 1 "key exist";fi
  raw_create ${TMPFS} ${TMPFS_}
else
  if [[ ! -d ${ROOTFS_} ]];then usage_raw 1 "rootfs doesnt exist";fi
  if [[ ! -d ${OVERLAYFS_} ]];then usage_raw 1 "overlayfs doesnt exist";fi
  if [[ ! -d ${TMPFS_} ]];then usage_raw 1 "tmpfs doesnt exist";fi
  if [[ $(mount | grep ${TMPFS_}) ]];then usage 1 "something already mounted on overlayfs";fi 
  if [[ ! -f ${RAWFS_}${TMPFS} ]];then usage_raw 1 "rawfs doesnt exist";fi
  if [[ ! -f ${KEY_}${TMPFS} ]];then usage_raw 1 "key doesnt exist";fi
  raw_mount ${TMPFS} ${TMPFS_}
fi
#######################################################################################################
else echo "failed raw input";fi;fi;;
###############################################################################################################################################################################################################



(install)
if [[ ${EUID} -ne 0 ]];then usage_install 1 "root or gtfo";fi
if [[ $# -eq 0 ]];then usage_install 0;else

while getopts "r:o:t:b:i:h" arg;do
  case ${arg} in
    (r)ROOTFS="${OPTARG}";ROOTFS_+="${ROOTFS}";;
    (o)OVERLAYFS="${OPTARG}";;
    (t)TMPFS="${OPTARG}";;
    (b)BASE="${OPTARG}";;
    (i)INSTALL="${OPTARG}";;
    (h)usage_install 0;;
    (*)usage_install 1;;
  esac
done
if [[ ! -z ${TMPFS} ]];then if [[ ! -z ${OVERLAYFS} ]];then TMPFS="${OVERLAYFS}.${TMPFS}";fi;TMPFS="${ROOTFS}.${TMPFS}";TMPFS_+=${TMPFS};fi
if [[ ! -z ${OVERLAYFS} ]];then OVERLAYFS="${ROOTFS}.${OVERLAYFS}";OVERLAYFS_+=${OVERLAYFS};fi
if [[ ! -z ${BASE} ]];then check_base;else BASE=default;fi
if [[ ! -z ${INSTALL} ]];then check_install;fi
#######################################################################################################
# ROOTFS
if [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && -z ${TMPFS} ]];then
if [[ -d ${ROOTFS_} ]];then if [[ ! $(mount | grep ${ROOTFS_}) || $(ls -A ${ROOTFS_}) != "lost+found" ]];then usage_install 1 "rootfs exists and isnt an empty rawfs";fi;fi
. ${CONFIG_}base/${BASE}/install_script ${ROOTFS_}
if [[ ! -z ${INSTALL} ]];then for i in ${INSTALL};do . ${CONFIG_}install/${i}/install_script ${ROOTFS_};done;fi
#######################################################################################################
# ROOTFS TMPFS
elif [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && ! -z ${TMPFS} && ! -z ${INSTALL} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_install 1 "rootfs doesnt exist";fi
if [[ $(ls -A ${ROOTFS_}) == "" || $(ls -A ${ROOTFS_}) == "lost+found" ]];then usage_install 1 "rootfs exists but is empty";fi # extra rawfs check for mount fails
if [[ ! -d ${TMPFS_} ]];then mkdir ${TMPFS_};fi
unionfs_rw ${TMPFS} ${TMPFS_} ${RAWFS_}
for i in ${INSTALL};do . ${CONFIG_}install/${i}/install_script ${MOUNT_}${TMPFS};done
#######################################################################################################
# ROOTFS OVERLAYFS
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && -z ${TMPFS} && ! -z ${INSTALL} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_install 1 "rootfs doesnt exist";fi
if [[ $(ls -A ${ROOTFS_}) == "" || $(ls -A ${ROOTFS_}) == "lost+found" ]];then usage_install 1 "rootfs exists but is empty";fi
if [[ ! -d ${OVERLAYFS_} ]];then mkdir ${OVERLAYFS_};fi
unionfs_rw ${OVERLAYFS} ${OVERLAYFS_} ${ROOTFS_}
for i in ${INSTALL};do . ${CONFIG_}install/${i}/install_script ${MOUNT_}${OVERLAYFS};done
#######################################################################################################
# ROOTFS OVERLAYFS TMPFS
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && ! -z ${TMPFS} && ! -z ${INSTALL} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_install 1 "rootfs doesnt exist";fi
if [[ $(ls -A ${ROOTFS_}) == "" || $(ls -A ${ROOTFS_}) == "lost+found" ]];then usage_install 1 "rootfs exists but is empty";fi
if [[ ! -d ${OVERLAYFS_} ]];then usage_install 1 "overlayfs doesnt exist";fi
if [[ $(ls -A ${OVERLAYFS_}) == "" || $(ls -A ${OVERLAYFS_}) == "lost+found" ]];then usage_install 1 "overlayfs exists but is empty";fi
if [[ ! -d ${TMPFS_} ]];then mkdir ${TMPFS_};fi
unionfs_ro ${OVERLAYFS} ${OVERLAYFS_} ${ROOTFS_}
unionfs_rw ${TMPFS} ${TMPFS_} ${OVERLAYFS}
for i in ${INSTALL};do . ${CONFIG_}install/${i}/install_script ${MOUNT_}${TMPFS};done
#######################################################################################################
else echo "failed install input";fi;fi;;
###############################################################################################################################################################################################################



(boot)
if [[ ${EUID} -ne 0 ]];then usage 1 "must be run as root";fi
if [[ $# -eq 0 ]];then usage_boot 0;else
while getopts "r:o:t:b:ch" arg;do
  case ${arg} in
    (r)ROOTFS="${OPTARG}";ROOTFS_+="${ROOTFS}";;
    (o)OVERLAYFS="${OPTARG}";;
    (t)TMPFS="${OPTARG}";;
    (b)BRIDGE="${OPTARG}";;
    (c)CAPS="not_empty";;
    (h)usage_raw 0;;
    (*)usage_raw 1;;
  esac
done
if [[ ! -z ${TMPFS} ]];then if [[ ! -z ${OVERLAYFS} ]];then TMPFS="${OVERLAYFS}.${TMPFS}";fi;TMPFS="${ROOTFS}.${TMPFS}";TMPFS_+=${TMPFS};fi
if [[ ! -z ${OVERLAYFS} ]];then OVERLAYFS="${ROOTFS}.${OVERLAYFS}";OVERLAYFS_+=${OVERLAYFS};fi
if [[ -z ${BRIDGE} ]];then BRIDGE=internal;fi
if [[ -z ${CAPS} ]];then CAPS="CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_DAC_READ_SEARCH, CAP_FOWNER, CAP_FSETID, CAP_IPC_OWNER, CAP_KILL, CAP_LEASE, CAP_LINUX_IMMUTABLE, CAP_NET_BIND_SERVICE, CAP_NET_BROADCAST, CAP_NET_RAW, CAP_SETGID, CAP_SETFCAP, CAP_SETPCAP, CAP_SETUID, CAP_SYS_ADMIN, CAP_SYS_CHROOT, CAP_SYS_NICE, CAP_SYS_PTRACE, CAP_SYS_TTY_CONFIG, CAP_SYS_RESOURCE, CAP_SYS_BOOT, CAP_AUDIT_WRITE, CAP_AUDIT_CONTROL. CAP_NET_ADMIN";else CAPS="";fi
#######################################################################################################
# ROOTFS
if [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && -z ${TMPFS} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_boot 1 "rootfs doesnt exist";fi
nspawn ${ROOTFS_}
#######################################################################################################
# ROOTFS TMPFS
elif [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && ! -z ${TMPFS} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_boot 1 "rootfs doesnt exist";fi
if [[ ! -d ${TMPFS_} ]];then mkdir ${TMPFS_};fi
unionfs_rw ${TMPFS} ${TMPFS_} ${ROOTFS_}
nspawn ${MOUNT_}${TMPFS}
#######################################################################################################
# ROOTFS OVERLAYFS
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && -z ${TMPFS} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_boot 1 "rootfs doesnt exist";fi
if [[ ! -d ${OVERLAYFS_} ]];then mkdir ${OVERLAYFS_};fi
unionfs_rw ${OVERLAYFS} ${OVERLAYFS_} ${ROOTFS_}
nspawn ${MOUNT_}${OVERLAYFS}
#######################################################################################################
# ROOTFS OVERLAYFS TMPFS
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && ! -z ${TMPFS} ]];then
if [[ ! -d ${ROOTFS_} ]];then usage_boot 1 "rootfs doesnt exist";fi
if [[ ! -d ${OVERLAYFS_} ]];then usage_boot 1 "overlayfs doesnt exist";fi
if [[ ! -d ${TMPFS_} ]];then mkdir ${TMPFS_};fi
unionfs_ro ${OVERLAYFS} ${OVERLAYFS_} ${ROOTFS_}
unionfs_rw ${TMPFS} ${TMPFS_} ${MOUNT_}${OVERLAYFS}
nspawn ${MOUNT_}${TMPFS}
#######################################################################################################
else echo "failed install input";fi;fi;;
###############################################################################################################################################################################################################



(rdp)
if [[ ! ${EUID} -ne 0 ]];then usage 1 "none root or gtfo";fi
if [[ $# -eq 0 ]];then usage_rdp 0;else
  while getopts "a:x:u:p:e:yh" arg;do
    case ${arg} in
      (a)ADDRESS=${OPTARG};;
      (x)XEPHYR=${OPTARG};;
      (u)AS=${OPTARG};;
      (p)PORT=${OPTARG};;
      (e)EXECUTE=${OPTARG};;
      (y)TEMP="true";;
      (h)usage_rdp 0;;
      (*)usage_rdp 1;;
    esac
  done
if [[ -z ${XEPHYR} ]];then XEPHYR=:13;fi
if [[ -z ${AS} ]];then AS="user";fi
if [[ -z ${PORT} ]];then PORT="31279";fi
if [[ -z ${EXECUTE} ]];then EXECUTE="dwm";fi
ORIGINAL=${DISPLAY}
(Xephyr -screen 1900x1050 ${XEPHYR} &)&
export DISPLAY=:${XEPHYR}
if [[ ${TEMP} == "true" ]];then
(ssh -o StrictHostKeyChecking="no" -o UserKnownHostsFile="/dev/null" -Yp ${PORT} ${AS}@${ADDRESS} ${EXECUTE} &>/dev/null &)&
else
(ssh -o StrictHostKeyChecking="no" -o UserKnownHostsFile="/dev/null" -p ${PORT} ${AS}@${ADDRESS} ${EXECUTE} &>/dev/null &)&
fi
export DISPLAY=${ORIGINAL}
fi;;
###############################################################################################################################################################################################################



(monitor)
if [[ ${EUID} -ne 0 ]];then usage 1 "must be run as root";fi
clear
# random color configs... testing 

# Regular Colors
black='\e[0;30m'        # Black
red='\e[0;31m'          # Red
green='\e[0;32m'        # Green
yellow='\e[0;33m'       # Yellow
blue='\e[0;34m'         # Blue
purple='\e[0;35m'       # Purple
cyan='\e[0;36m'         # Cyan
white='\e[0;37m'        # White

declare -A color
color[black]=$black
color[red]=$red
color[green]=$green
color[yellow]=$yellow
color[blue]=$blue
color[purple]=$purple
color[cyan]=$cyan
color[white]=$white

# Bold
bblack='\e[1;30m'       # Black
bred='\e[1;31m'         # Red
bgreen='\e[1;32m'       # Green
byellow='\e[1;33m'      # Yellow
bblue='\e[1;34m'        # Blue
bpurple='\e[1;35m'      # Purple
bcyan='\e[1;36m'        # Cyan
bwhite='\e[1;37m'       # White

declare -A bold
bold[black]=$bblack
bold[red]=$bred
bold[green]=$bgreen
bold[yellow]=$byellow
bold[blue]=$bblue
bold[purple]=$bpurple
bold[cyan]=$bcyan
bold[white]=$bwhite

# Background
bgblack='\e[40m'       # Black
bgred='\e[41m'         # Red
bggreen='\e[42m'       # Green
bgyellow='\e[43m'      # Yellow
bgblue='\e[44m'        # Blue
bgpurple='\e[45m'      # Purple
bgcyan='\e[46m'        # Cyan
bgwhite='\e[47m'       # White

declare -A background
background[black]=$bgblack
background[red]=$bgred
background[green]=$bggreen
background[yellow]=$bgyellow
background[blue]=$bgblue
background[purple]=$bgpurple
background[cyan]=$bgcyan
background[white]=$bgwhite

# Reset
reset='\e[0m'       # Text Reset

#for i in ${!color[@]};do echo -e "${color[$i]} debug ${reset}";done
#for i in ${!bold[@]};do echo -e "${bold[$i]} debug $reset";done
#for i in ${!background[@]};do echo -e "${background[$i]} debug $reset";done


declare -A MONITOR
for i in $(ls ${ROOTFS_});do
  MONITOR[${i}]+=""
  for o in $(ls ${OVERLAYFS_});do if [[  $(grep "${i}\." <<< ${o}) ]];then MONITOR[${i}]+="${o} ";fi;done
  for o in $(ls ${TMPFS_});do if [[ $(grep "${i}\." <<< ${o}) ]];then MONITOR[${i}]+="${o} ";fi;done
done
#######################################################################################################

for i in "${!MONITOR[@]}";do
echo -en "${bold[red]}"
echo "########################################################################################################################################################################################################"
echo -en "[ rootfs - ${i} ]${reset}"
echo -en "${color[cyan]}"
#RAWFS
if [[ -f ${RAWFS_}${i} ]];then
  echo -en "[ "
  echo -en "rawfs "
  if [[ -f ${KEY_}${i} ]];then echo -en "key ";fi
  if [[ -a /dev/mapper/${i} ]];then echo -en "mapped ";fi
  if [[ $(mount | grep ${ROOTFS_}${i}) ]];then echo -en "mounted ";fi 
  echo -en "] "
fi
#UNIONFS 
  echo -en "[ "
  echo -en "unionfs ("
  echo -en "$(mount | grep unionfs | grep "${i}" | wc -l)) "
  echo -en "] "
#MACHINE  
  echo -en "[ "
  echo -en "machinectl ("
  echo -en "$(machinectl | grep "${i} " | wc -l)/$(machinectl | grep "${i}\." | wc -l)) "
  echo -en "]"
  echo -e "$reset"
#######################################################################################################a
  for o in ${MONITOR[${i}]};do
    echo -en "\t${bold[green]}[ overlayfs - ${o} ]${reset}"

    echo -en "${color[cyan]}"
    # if its a rawfs
    if [[ -f ${RAWFS_}${o} ]];then
      echo -en "[ "
      echo -en "rawfs "
      if [[ -f ${KEY_}${i} ]];then echo -en "key ";fi
      if [[ -a /dev/mapper/${o} ]];then echo -en "mapped ";fi
      if [[ $(mount | grep ${OVERLAYFS_}${o}) || $(mount | grep ${TMPFS_}${o}) ]];then echo -en "mounted ";fi
      echo -en "] "
    fi  

    # unionfs + number of     
    
    # all unionfs mounts for the exact occurance of rootfs.overlayfs&|tmpfs
    echo -en "[ unionfs ($(mount | grep unionfs | grep "${o} " | wc -l)/"
    # all unionfs mounts including tmpfs rootfs.overlayfs.*
    echo -en "$(mount | grep unionfs | grep "${o}" | wc -l)) ] "
    
    echo -en "[ "
    # all machinectl for the exact occurance or rootfs.overlayfs&|tmpfs
    echo -en "machinectl ($(machinectl | grep "${o} " | wc -l)/"
    # all machinectl entries that include the rootfs.overlayfs.*
    echo -en "$(machinectl | grep "${o}" | wc -l)) "
    echo -en " ]"
echo -en "${reset}"
echo ""
done
done
echo -en "${bold[red]}"
echo "########################################################################################################################################################################################################"
echo -en "${reset}${color[cyan]}"
NUMBER_OF_RAWFS=$(ls -A ${RAWFS_} | wc -l)
NUMBER_OF_MAPPED=$(($(ls -A /dev/mapper | wc -l)-2))
NUMBER_OF_MOUNTED=$(( $(mount | grep ${ROOTFS_} | wc -l) + $(mount | grep ${OVERLAYFS_} | wc -l) + $(mount | grep ${TMPFS_} | wc -l) ))
NUMBER_OF_UNIONFS=$(mount | grep unionfs | wc -l)
NUMBER_OF_RUNNING=$(($(machinectl | wc -l) -3))
echo "[ rawfs: ${NUMBER_OF_RAWFS} | mapped: ${NUMBER_OF_MAPPED} | mounted: $NUMBER_OF_MOUNTED ] [ unionfs: ${NUMBER_OF_UNIONFS} ] [ running: ${NUMBER_OF_RUNNING} ]"
echo -en "${reset}${bold[red]}"
echo "########################################################################################################################################################################################################"
;;
###############################################################################################################################################################################################################



(kill)
if [[ ${EUID} -ne 0 ]];then usage 1 "must be run as root";fi
if [[ $# -eq 0 ]];then usage_kill 0;else
while getopts "r:o:t:ah" arg;do
  case ${arg} in
    (r)ROOTFS="${OPTARG}";ROOTFS_+="${ROOTFS}";;
    (o)OVERLAYFS="${OPTARG}";;
    (t)TMPFS="${OPTARG}";;
    (a)ALL="not_empty";;
    (h)usage_raw 0;;
    (*)usage_raw 1;;
  esac
done
if [[ ! -z ${TMPFS} ]];then if [[ ! -z ${OVERLAYFS} ]];then TMPFS="${OVERLAYFS}.${TMPFS}";fi;TMPFS="${ROOTFS}.${TMPFS}";TMPFS_+=${TMPFS};fi
if [[ ! -z ${OVERLAYFS} ]];then OVERLAYFS="${ROOTFS}.${OVERLAYFS}";OVERLAYFS_+=${OVERLAYFS};fi
#######################################################################################################
if [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && -z ${TMPFS} && -z ${ALL} ]];then
while [[ $(machinectl | grep "${ROOTFS} ") ]];do machinectl poweroff ${ROOTFS};done
#DEPS
if [[ $(mount | grep unionfs | grep "${ROOTFS}\." | wc -l) -gt 0 ]];then
  usage_kill 1 "leaving rawfs has dependencies"
else
#RAWFS
  if [[ $(mount | grep ${ROOTFS_}) ]];then umount ${ROOTFS_};fi
  if [[ $(grep ${ROOTFS} <<<$(ls /dev/mapper/)) ]];then cryptsetup close /dev/mapper/${ROOTFS};fi
fi
#######################################################################################################
elif [[ ! -z ${ROOTFS} && -z ${OVERLAYFS} && ! -z ${TMPFS} && -z ${ALL} ]];then
while [[ $(machinectl | grep "${TMPFS} ") ]];do machinectl poweroff ${TMPFS};done
#UNIONFS
if [[ $(mount | grep "${MOUNT_}${TMPFS}") ]];then umount ${MOUNT_}${TMPFS};fi
#RAWFS
if [[ $(mount | grep ${TMPFS_}) ]];then umount ${TMPFS_};fi
if [[ $(grep ${TMPFS} <<<$(ls /dev/mapper/)) ]];then cryptsetup close /dev/mapper/${TMPFS};fi
#######################################################################################################
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && -z ${TMPFS} && -z ${ALL} ]];then
while [[ $(machinectl | grep "${OVERLAYFS} ") ]];do machinectl poweroff ${OVERLAYFS};done

#DEPS
if [[ $(mount | grep unionfs | grep ${OVERLAYFS} | wc -l) -gt 1 ]];then
  usage_kill 1 "killed ${OVERLAYFS} left unionfs mounts"
else
#UNIONFS
  umount ${MOUNT_}${OVERLAYFS}
#RAWFS
  if [[ $(mount | grep ${OVERLAYFS_}) ]];then umount ${OVERLAYFS_};fi
  if [[ $(grep ${OVERLAYFS} <<<$(ls /dev/mapper/)) ]];then cryptsetup close /dev/mapper/${OVERLAYFS};fi
fi

#######################################################################################################
elif [[ ! -z ${ROOTFS} && ! -z ${OVERLAYFS} && ! -z ${TMPFS} && -z ${ALL} ]];then
while [[ $(machinectl | grep "${TMPFS} ") ]];do machinectl poweroff ${TMPFS};done
#UNIONFS
if [[ $(mount | grep ${MOUNT_}${TMPFS}) ]];then umount ${MOUNT_}${TMPFS};fi
#RAWFS
if [[ $(mount | grep ${TMPFS_}) ]];then umount ${TMPFS_};fi
if [[ $(grep ${TMPFS} <<<$(ls /dev/mapper)) ]];then cryptsetup close /dev/mapper/${TMPFS};fi

#######################################################################################################

elif [[ -z ${ROOTFS} && -z ${OVERLAYFS} && -z ${TMPFS} && ! -z ${ALL} ]];then
# kill all the machines till they are good and dead
MACHINECTL=$(machinectl | sed 1d | sed '/^$/d' | sed '$ d' | cut -d " " -f1)
for i in ${MACHINECTL};do
  echo "killing machine - ${i}"
  while [[ $(machinectl | grep "${i} ") ]];do machinectl poweroff ${i};done
done

echo "umount all umount -R ${MOUNT_}\* "
  for i in 0 1 2;do umount -R  ${MOUNT_}*;done
 # for i in $(mount | grep unionfs | grep '.*\..*\..*\.' | cut -d " " -f3);do umount ${i};done
 # for i in $(mount | grep unionfs | cut -d " " -f3);do umount ${1};done
echo "umount all rawfs starting with tmpfs_ overlayfs_ rootfs_"
  for i in $(mount | grep ${TMPFS_} | cut -d " " -f3);do umount ${i};done
  for i in $(mount | grep ${OVERLAYFS_} | cut -d " " -f3);do umount ${i};done
  for i in $(mount | grep ${ROOTFS_} | cut -d " " -f3);do umount ${i};done
echo "close all map:map_"
  for i in $(ls /dev/mapper/);do if [[ ${i} != "arch_airootfs" && ${i} != "control" ]];then cryptsetup close /dev/mapper/${i};fi;done

#######################################################################################################
else usage_kill 1 "no input ";fi
fi;;



###############################################################################################################################################################################################################
(*) usage 1 "no input";;
###############################################################################################################################################################################################################
esac











###############################################################################################################################################################################################################


