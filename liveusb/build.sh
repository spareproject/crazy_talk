#!/bin/env bash
###############################################################################################################################################################################################################
trap "exit" SIGINT
###############################################################################################################################################################################################################
function usage { echo -e "${0} - help\narg0 - usbstick /dev/sdXYZ\narg1 - airootfs config\n${2}";exit ${1}; }
if [[ $# != 2 ]];then usage 1;fi
###############################################################################################################################################################################################################
mkdir -p ./rootfs
mkdir -p ./mount/
###############################################################################################################################################################################################################
if [[ ! -b ${1} ]];then usage 1 "device doesnt exist";fi
if [[ ${1: -1} == [0-9] ]];then usage 1 "takes device not partition";fi
if [[ ! -b ${1}1 || ! -b ${1}2 || ! -b ${1}3 ]];then usage 1 "incorect partition scheme on device...";fi
if [[ ! -d ./airootfs/${2} ]];then usage 1 "airootfs directory doesnt exist";fi
if [[ ! -f ./airootfs/${2}/etc/pacman.conf ]];then usage 1 "pacman.conf doesnt exist";fi
if [[ ! -f ./airootfs/${2}/root/package_list ]];then useage 1 "airootfs package list doesnt exist";fi
if [[ ! -f ./airootfs/${2}/root/arch.conf ]];then usage 1 "arch.conf doesnt exist";fi
if [[ ! -f ./airootfs/${2}/root/loader.conf ]];then usage 1 "loader.conf doesnt exist";fi
if [[ ! -f ./airootfs/${2}/root/syslinux.cfg ]];then usage 1 "syslinux.cfg doesnt exist";fi
if [[ ! -f ./airootfs/${2}/root/install.sh ]];then useage 1 "install.sh doesnt exist";fi
if [[ ! -f ./airootfs/${2}/root/09-gnupg.rules ]];then usage 1 "09-gnupg.rules doesnt exist";fi # need to fix this part
if [[ ! -z $(ls rootfs/) ]];then umount ./rootfs/* 2>/dev/null;rm -r ./rootfs/*;fi
###############################################################################################################################################################################################################
lsblk 
unset input;while [[ ${input} != @("y"|"n") ]];do read -r -p "about to mkfs.vfat ${1}1 continue (y|n)?" input;done
if [[ ${input} == "n" ]];then usage 1 "learn to fuck up less...";fi
###############################################################################################################################################################################################################
mkfs.vfat -F32 "${1}1"
###############################################################################################################################################################################################################
pacstrap -C ./airootfs/${2}/etc/pacman.conf -cGMd ./rootfs $(for i in $(cat ./airootfs/${2}/root/package_list);do if [[ ! $(grep "#" <<< ${i}) ]];then echo -n "${i} " ;fi;done)
cp -arfv airootfs/${2}/* rootfs/
###############################################################################################################################################################################################################
mount ${1}1 ./mount
mv ./rootfs/boot/* ./mount/
umount ./mount/
###############################################################################################################################################################################################################
arch-chroot ./rootfs /root/install.sh ${1}
###############################################################################################################################################################################################################
if [[ ! -z $(ls ./rootfs/root/packages) ]];then for i in $(ls ./rootfs/root/packages);do pacman -r ./rootfs -U ./rootfs/root/packages/${i};done;fi
###############################################################################################################################################################################################################
idproduct=$(udevadm info ${1} | grep -e ID_MODEL_ID | sed 's/E: ID_MODEL_ID=//')
idvendor=$(udevadm info ${1} | grep -e ID_VENDOR_ID | sed 's/E: ID_VENDOR_ID=//')
iserial=$(udevadm info ${1} | grep -e ID_SERIAL_SHORT | sed 's/E: ID_SERIAL_SHORT=//')
sed -i -e "s/IDVENDOR/${idvendor}/" -e "s/IDPRODUCT/${idproduct}/" -e "s/SERIAL/${iserial}/" ./rootfs/root/09-gnupg.rules
###############################################################################################################################################################################################################
mount ${1}1 ./mount
mksquashfs ./rootfs ./mount/rootfs.squashfs
umount ./mount
###############################################################################################################################################################################################################
unset input;while [[ ${input} != @("y"|"n") ]];do read -r -p "remove rootfs? (y|n)?" input;done
if [[ ${input} == "y" ]];then umount ./rootfs/* 2>/dev/null;rm -r ./rootfs/*;fi
###############################################################################################################################################################################################################
